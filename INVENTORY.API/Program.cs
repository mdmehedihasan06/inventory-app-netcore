using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using Serilog;
using Serilog.Events;
using Microsoft.Extensions.Logging;
using Microsoft.IdentityModel.Logging;
using INVENTORY.Infrastructure.Context;
using INVENTORY.Infrastructure.Helper;
using INVENTORY.API.Middleware;
using INVENTORY.Application.Helper;
using INVENTORY.Application.Mapping;
using Microsoft.OpenApi.Models;
using System.Reflection;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Versioning;
using Microsoft.Extensions.Options;
using Swashbuckle.AspNetCore.SwaggerUI;
using Microsoft.AspNetCore.Mvc.ApiExplorer;
using Microsoft.AspNetCore.Hosting;
using INVENTORY.API;
using INVENTORY.Infrastructure.Constant;
using INVENTORY.API.Helper;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<AppDbContext>(options => options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnectionString")));

// Add Serilog to the logging system
Log.Logger = new LoggerConfiguration()
    .MinimumLevel.Override("Microsoft", LogEventLevel.Warning)
    .Enrich.FromLogContext()
    //.WriteTo.Console()
    .WriteTo.File("./Logging/ApplicationLog.txt", rollingInterval: RollingInterval.Month)
    .CreateLogger();
builder.Host.UseSerilog();
builder.Logging.ClearProviders();
builder.Logging.AddSerilog(dispose: true);


// Register the logger as a singleton
builder.Services.AddSingleton(Log.Logger);
var rolls = new Rolls();
builder.Services.AddSingleton(Options.Create(rolls));
// Add services to the container.
builder.Services.AddApplication();
builder.Services.AddInfrastructure(builder.Configuration);
builder.Services.AddTransient<SwaggerUIOptionsSetup>();
IdentityModelEventSource.ShowPII = true;
builder.Services.AddControllers();

builder.Services.AddSwaggerGen(c =>
{
    //The generated Swagger JSON file will have these properties.
    //c.SwaggerDoc("v1", new OpenApiInfo
    //{
    //    Title = "INVENTORY Web API",
    //    Version = "v1",
    //    Description = "To access any information you have from this api gateway you have to authenticate with your client credential. If user authenticate with user credential, client token need to be overwritten."
    //});

	c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Description = "Please enter token information. \r\n\r\n Enter access_token in the text input below.\r\n\r\nExample: \"12345abcdef\"",
        Name = "Authorization",
        In = ParameterLocation.Header,
        Type = SecuritySchemeType.ApiKey,
        Scheme = "Bearer"
    });
    c.AddSecurityRequirement(new OpenApiSecurityRequirement
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type = ReferenceType.SecurityScheme,
                                Id = "Bearer"
                            }
                        }, new List<string>()
                    }
                });

    //Locate the XML file being generated by ASP.NET...
    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
    foreach (var name in Directory.GetFiles(AppContext.BaseDirectory, "*.XML", SearchOption.AllDirectories))
    {
        c.IncludeXmlComments(name);
    }
});
builder.Services.ConfigureOptions<ConfigureSwaggerOptions>();
builder.Services.AddApiVersioning(opt =>
{
	opt.DefaultApiVersion = new ApiVersion(1, 0);
	opt.AssumeDefaultVersionWhenUnspecified = true;
	opt.ReportApiVersions = true;
	opt.ApiVersionReader = ApiVersionReader.Combine(new UrlSegmentApiVersionReader(),
													new HeaderApiVersionReader("x-api-version"),
													new MediaTypeApiVersionReader("x-api-version"));
});

// Add ApiExplorer to discover versions
builder.Services.AddVersionedApiExplorer(setup =>
{
	setup.GroupNameFormat = "'v'VVV";
	setup.SubstituteApiVersionInUrl = true;
});
builder.Services.AddEndpointsApiExplorer();

builder.Services.AddCors(options =>
{
	options.AddDefaultPolicy(builder =>
	{
		builder.WithOrigins("https://bpplastic.hasanapi.xyz", "http://localhost:4200")
			.AllowAnyHeader()
			.AllowAnyMethod();
	});
});

// Set the Swagger UI to use the default API version
builder.Services.ConfigureOptions<SwaggerUIOptionsSetup>();
MappingConfig.Configure();


var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "INVENTORY-Project v1"));
}
//else
//{
//	app.UseGlobalExceptionHandlerMiddleware();
//}

app.UseMiddleware<GlobalExceptionHandlerMiddleware>();

app.UseHttpsRedirection();
app.UseRouting();

app.UseCors(x => x.AllowAnyHeader().AllowAnyMethod().AllowAnyOrigin());
app.UseApiVersioning();
app.UseAuthentication();
app.UseAuthorization();
app.MapControllers();

app.Run();